It witten in the ashi corp conf lang with .tf extantion. it rewriten in the declarative mammer means - it do not run the run code but accutally check the cloud (where ever you are creating) and make sure it has all the instancres are persent. 

Common commands:

                                    (CLI- commends)
                                        apply              Builds or changes infrastructure

                                        console            Interactive console for Terraform interpolations
                                        destroy            Destroy Terraform-managed infrastructure
                                        env                Workspace management
                                        fmt                Rewrites config files to canonical format
                                        get                Download and install modules for the configuration
                                        graph              Create a visual graph of Terraform resources
                                        import             Import existing infrastructure into Terraform

                                        init               Initialize a Terraform working directory

                                        login              Obtain and save credentials for a remote host
                                        logout             Remove locally-stored credentials for a remote host
                                        output             Read an output from a state file

                                        plan               Generate and show an execution plan

                                        providers          Prints a tree of the providers used in the configuration
                                        refresh            Update local state file against real resources
                                        show               Inspect Terraform state or plan
                                        taint              Manually mark a resource for recreation
                                        untaint            Manually unmark a resource as tainted
                                        validate           Validates the Terraform files
                                        version            Prints the Terraform version
                                        workspace          Workspace management

                                    All other commands:
                                        0.12upgrade        Rewrites pre-0.12 module source code for v0.12
                                        0.13upgrade        Rewrites pre-0.13 module source code for v0.13
                                        debug              Debug output management (experimental)
                                        force-unlock       Manually unlock the terraform state
                                        push               Obsolete command for Terraform Enterprise legacy (v1)
                                        state              Advanced state management



Providers
-----------
Terraform is used to create, manage, and update infrastructure resources such as physical machines, VMs, network switches, containers, and more. Almost any infrastructure type can be represented as a resource in Terraform.

A provider is responsible for understanding API interactions and exposing resources. Most providers configure a specific infrastructure platform (either cloud or self-hosted). Providers can also offer local utilities for tasks like generating random numbers for unique resource names.
 - To work with the terraform we need to install the nessary plugins to communate with the Providers. 
 

                                            provider "aws" {
                                              region  = "us-east-1"
                                              access_key = "AKIAIQALPXYK5CCNX2IA"
                                              secret_key = "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"
                                            }

                                            # resource "<provider>_<resource_type>" "name" {
                                            #    config options......
                                            #}

                                             resource "aws_instance" "Test_terraform" {
                                               ami           = "ami-00514a528eadbc95b"
                                               instance_type = "t2.micro"
                                               tags = {
                                                 Name = "Terraform"
                                               }
                                             }

                                             resource "aws_instance" "Test_terraformtwo" {
                                               ami           = "ami-00514a528eadbc95b"
                                               instance_type = "t2.micro"
                                               tags = {
                                                 Name = "Terraform - 2"
                                               }
                                             }



