landscape.cncf.io -  will give you the landscap on that need to be filled after leanrning dockers.


Dockers
--------

Install Docker on an Amazon EC2 instance:
-----------------------------------------
sudo yum update -y

sudo yum install docker

sudo service docker start or /bin/systemctl start docker.service 

sudo usermod -a -G docker ec2-user

When you install dDocker in the linic you have to install the docker machine and Docker compose:
Docker machine:
----------------
base=https://github.com/docker/machine/releases/download/v0.16.0 &&
  curl -L $base/docker-machine-$(uname -s)-$(uname -m) >/tmp/docker-machine &&
  sudo mv /tmp/docker-machine /usr/local/bin/docker-machine &&
  chmod +x /usr/local/bin/docker-machine
  
 Docker Compose:
----------------
sudo curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
To install a different version of Compose, substitute 1.27.4 with the version of Compose you want to use.

sudo chmod +x /usr/local/bin/docker-compose

mv docker-compose /usr/bin/



Images vs Container
---------------------
Image - is the dineary, liberyed and sorcecore that make up the application 
Container -  is running indtance of that image 

Management Commands:
  builder     Manage builds
  config      Manage Docker configs
  
  container   Manage containers
  -------------------------------             
                run - create a new container - wehn it is run docker will look up in the local image chash first and it it did not find in the locally it will look in the docker hub.
                ls  - list all container
                stop - existing container
                start - will start existing container
                logs - show thw log of the specife conatiner 
                rm  - will remover conatiner for conatiner list 
                
                Top - Process list in the container 
                inspect - details of one container
                stats - give the stats (performnce) of all the containers
                
                
                Examples:
  
                      docker container run --publish 80:80 nginx
                                            it create the container called nignx and pupliching that in the port 80 
                      docker container run --publish -detach 80:80 nginx
                                            -detach (-d) will run the container in background 
                      docker container ls / docker ps
                      docker container stop 
                      docker container ls -a 
                            CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                     PORTS               NAMES
                            fd36c5210c3e        nginx               "/docker-entrypoint.…"   3 minutes ago       Exited (0) 2 minutes ago                       eager_kirch
                            2d1e7922788a        nginx               "/docker-entrypoint.…"   8 minutes ago       Exited (0) 5 minutes ago                       quizzical_ellis
                                  
                                  Docker willl create the name by itself if not given 
                       
                      docker container run --publish -detach 80:80 --name <xxx>  nginx
                      docker container logs <conatiner_name>
                    
               doker container run -it (i-intervactive - to keep the section open and t - tty same ssh) -  opens the shell inside that new conatiner 
               doker container exec -it - to run the secound process in the existing container
                
                
                
                
  
  context     Manage contexts
  engine      Manage the docker engine
  image       Manage images
  network     Manage networks
  node        Manage Swarm nodes
  plugin      Manage plugins
  secret      Manage Docker secrets
  service     Manage services
  stack       Manage Docker stacks
  swarm       Manage Swarm
  system      Manage Docker
  trust       Manage trust on Docker images
  volume      Manage volumes

Commands:
  attach      Attach local standard input, output, and error streams to a running container
  build       Build an image from a Dockerfile
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem
  create      Create a new container
  diff        Inspect changes to files or directories on a container's filesystem
  events      Get real time events from the server
  exec        Run a command in a running container
  export      Export a container's filesystem as a tar archive
  ETC......
  
  
  Docker commend formate - $ docker <Management commned> <commend>
  
  
  
  Docker network **
  ---------------
  When you createing the container you basssically connecting to the docker default newtork called "bridge". Thought the NAT firewell (bacealy - docker demon configraing the host IP so that you container can go into the neetwork and back)
  
  
                          NETWORK ID          NAME                DRIVER              SCOPE
                          -----------         -----               -------             -----
                          a6d69e38cdd7        bridge              bridge              local  - is the defalt docker network 
                          19257922996c        host                host                local  - a network that skips the viutal networking of docker and connect the container to the host meachian - it will have the sevurity issue but will have hight through put
                          736a1f5ef0ce        none                null                local  - Have the insterface on you local mechain 

  
      Network CLI:
      ------------
            docker network ls
            docker network inspect <network_name>
            docker network create --driver 
            docker network connect <network> <container>
            docker network disconnect
            
            docker container -p (expose the post to the network)
            docker container port - list the post of the container 
            docker container -d --name <name> --network <network_name>
            docker container port
  
  
  
      Docker network: DNS
      -------------------
      when you create the new network it cones with the DSN not like the bridge network. So it best to create the new network all the time. reather then usling the "--link" in the bridge network

  
  
  
  Docker Images:
  --------------
  Image - is the dineary, liberyed and sorcecore that make up the application. conatine of metadata about the image date and how to run the image.
         - It not a complate OS where there is no Kernal or drivers, karnal is provided by the host.   
     
       Example:
       --------
        "TAG's" are the version. A single image ID can have the miltiply tags.
        
        $ docker image pull <image_name>
        $ docker image push <image_name>
        $ docker image ls
        
        REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
        ----------          ----                --------            -------             ----
        ubuntu              latest              9140108b62dc        5 days ago          72.9MB
        httpd               latest              417af7dc28bc        2 weeks ago         138MB
        nginx               latest              7e4d58f0e5f3        3 weeks ago         133MB
        mysql               latest              e1d7dc9731da        3 weeks ago         544MB
        centos              latest              0d120b6ccaa8        7 weeks ago         215MB
        alpine              latest              a24bb4013296        4 months ago        5.57MB
        elasticsearch       2                   5e9d896dc62c        2 years ago         479MB
 
        CLI:
        ---
              
                build       Build an image from a Dockerfile
                history     Show the history of an image
                import      Import the contents from a tarball to create a filesystem image
                inspect     Display detailed information on one or more images
                load        Load an image from a tar archive or STDIN
                ls          List images
                prune       Remove unused images
                pull        Pull an image or a repository from a registry
                push        Push an image or a repository to a registry
                rm          Remove one or more images
                save        Save one or more images to a tar archive (streamed to STDOUT by default)
                tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE


      Image Layer:
      ------------
      Images are created as union filw system where layer are added on top of the layres.
      Are the layers are the upate and changes done on the old image file.
      
      Even the container are just the read/write layer on the image. when you change the a file in the conatiner are stored in the container not in the image. 
          
          CLI:
          ----
          docker hisyory <docekr_image_name>
          docker image inspect <docekr_image_name>
          
          
       Image Tagging:
       --------------
       Tagging are the version of the image.
       image are idifited with the REPOSITORY and TAG's
                  docker image tag <eixting_image_REPOSITORY> <New_REPOSITORY_name>
                  docker image tag <eixting_image_REPOSITORY> <New_REPOSITORY_name>:<tag>
           
  
  
DOCKERFILE's 
------------
Dockerfile is IAC of the docker.

CLI:
----
docker image build -t <tag_name> <Location>

After the you change anything in the Dockerfile and rerun the docker image build - i will use the cash data and run eveting after the edited line.
So its always better to keep the most unchanged data at the diggining of the code.

              Example:
              -------
              FROM debian:stretch-slim
              # all images must have a FROM
              # usually from a minimal Linux distribution like debian or (even better) alpine
              # if you truly want to start with an empty container, use FROM scratch

              ENV NGINX_VERSION 1.13.6-1~stretch
              ENV NJS_VERSION   1.13.6.0.1.14-1~stretch
              # optional environment variable that's used in later lines and set as envvar when container is running

              RUN apt-get update \
                      && apt-get install --no-install-recommends --no-install-suggests -y gnupg1 \
                      && \
                      NGINX_GPGKEY=573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62; \
                      found=''; \
                      for server in \
                              ha.pool.sks-keyservers.net \
                              hkp://keyserver.ubuntu.com:80 \
                              hkp://p80.pool.sks-keyservers.net:80 \
                              pgp.mit.edu \
                      ; do \
                              echo "Fetching GPG key $NGINX_GPGKEY from $server"; \
                              apt-key adv --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$NGINX_GPGKEY" && found=yes && break; \
                      done; \
                      test -z "$found" && echo >&2 "error: failed to fetch GPG key $NGINX_GPGKEY" && exit 1; \
                      apt-get remove --purge -y gnupg1 && apt-get -y --purge autoremove && rm -rf /var/lib/apt/lists/* \
                      && echo "deb http://nginx.org/packages/mainline/debian/ stretch nginx" >> /etc/apt/sources.list \
                      && apt-get update \
                      && apt-get install --no-install-recommends --no-install-suggests -y \
                                                              nginx=${NGINX_VERSION} \
                                                              nginx-module-xslt=${NGINX_VERSION} \
                                                              nginx-module-geoip=${NGINX_VERSION} \
                                                              nginx-module-image-filter=${NGINX_VERSION} \
                                                              nginx-module-njs=${NJS_VERSION} \
                                                              gettext-base \
                      && rm -rf /var/lib/apt/lists/*
              # optional commands to run at shell inside container at build time
              # this one adds package repo for nginx from nginx.org and installs it

              RUN ln -sf /dev/stdout /var/log/nginx/access.log \
                      && ln -sf /dev/stderr /var/log/nginx/error.log
              # forward request and error logs to docker log collector

              EXPOSE 80 443
              # expose these ports on the docker virtual network
              # you still need to use -p or -P to open/forward these ports on host

              CMD ["nginx", "-g", "daemon off;"]

Container life time:
--------------------
Containerzation are immutable infrasturucture - you do not change the existing running container. if you do need to change/update the conatiner - you just run a new container  

When you stop/start file is the container will not go away, only when you remove the conatiner the UFS (union file storage) will go away.


        Data Volumes:
        --------------
        Are the conf option that will create the spical location outside it's UFS. And attctch what ever container we want. 

                  Dockerfile
                     VOLUME /var/lib/mysql - when you run this docker file or pull the image with volume perameter - It create a new volume loacation and assigen to this location. and the file that are save in this path will out live the container. untill the volume is deleteed. 

            Volume has to mamually deleted. 
            
            Volume stored in the local host - cd /var/lib/docker/volumes/
                                              -----------------------------
            CLI:
            ----
            create      Create a volume
            inspect     Display detailed information on one or more volumes
            ls          List volumes
            prune       Remove all unused local volumes
            rm          Remove one or more volumes
              
              -v flage the for thr volune is to nmae the volume when using the docker run
          
        
        Bind Mounting:
        --------------
        Is mointing the host dir. or file into a conatiner. i will be like the conatiner file storage to the container.
        
        
        $ docker container run -p 80:80 -d -name ng -d -v <pathe>:<main_dir> nginx 
                      but doing do you get synce the host file system with the container main dir.
                      
 
 
 
 
 Docker Compose:
 --------------- 
 is writen in the YMAL.
 
 
                  Example:
                  --------
                  version: '2'

                    # same as
                    # docker run -p 80:4000 -v $(pwd):/site bretfisher/jekyll-serve

                    services:
                      jekyll:
                        image: jekyll/jekyll
                        
                        volumes:
                          - .:/site
                        
                        ports:
                          - '80:4000'
                                                                    YMAL:
                                                                    ------
                                                                          version: '3.1'  # if no version is specificed then v1 is assumed. Recommend v2 minimum

                                                                                    services:  # containers. same as docker run
                                                                                          servicename: # a friendly name. this is also DNS name inside network
                                                                                                    image: # Optional if you use build:
                                                                                                    command: # Optional, replace the default CMD specified by the image
                                                                                                    environment: # Optional, same as -e in docker run
                                                                                                    volumes: # Optional, same as -v in docker run
                                                                                           servicename2:

                                                                                    volumes: # Optional, same as docker volume create

                                                                                    networks: # Optional, same as docker network create


                $ docker-compose up
                $ docker-compose done 
                
                CLI:
                ----
                
                build              Build or rebuild services
                config             Validate and view the Compose file
                create             Create services
                down               Stop and remove containers, networks, images, and volumes
                events             Receive real time events from containers
                exec               Execute a command in a running container
                help               Get help on a command
                images             List images
                kill               Kill containers
                logs               View output from containers
                pause              Pause services
                port               Print the public port for a port binding
                ps                 List containers
                pull               Pull service images
                push               Push service images
                restart            Restart services
                rm                 Remove stopped containers
                run                Run a one-off command
                scale              Set number of containers for a service
                start              Start services
                stop               Stop services
                top                Display the running processes
                unpause            Unpause services
                up                 Create and start containers
                version            Show version information and quit



Docker Swarm:
--------------
Server cluster solution that bring togather diff OS into one managaable unit then you can orchestrat.

Docker doesn't anable the docker swarm
      docker info
      docker swarm init  # to activeate

  *** Even when you delete a container swarm will craete that misiing right was - it a part of the container orch.

          CLI:
          ----
          ca          Display and rotate the root CA
          init        Initialize a swarm
          join        Join a swarm as a node and/or manager
          join-token  Manage join tokens
          leave       Leave the swarm
          unlock      Unlock swarm
          unlock-key  Manage the unlock key
          update      Update the swarm


    Docker node:   (can only run by the master)
    -----------
          CLI:
          ----
          demote      Demote one or more nodes from manager in the swarm
          inspect     Display detailed information on one or more nodes
          ls          List nodes in the swarm
          promote     Promote one or more nodes to manager in the swarm
          ps          List tasks running on one or more nodes, defaults to current node
          rm          Remove one or more nodes from the swarm
          update      Update a node

     
     Docker service:
     ---------------
          CLI:
          ----
          create      Create a new service
          inspect     Display detailed information on one or more services
          logs        Fetch the logs of a service or task
          ls          List services
          ps          List the tasks of one or more services
          rm          Remove one or more services
          rollback    Revert changes to a service's configuration
          scale       Scale one or multiple replicated services
          update      Update a service
 
          # docker service create alpine ping 8.8.8.8
          # docker service ls
          # docker service update b6358fvmqs0b --replicas 3
          
          
          
          
       Routing Mesh: (basically it leastin on all the nodes rought the trafice to the right container)
       -------------
       is a routes ingresss (incoming) packats for a services to proprt Task
       Spans all nodes in swarm 
       load blances swarm serverices across thier tasks
       Container-to-container ina Overlay network (users VIP)
       it a stateless the load blancing 
       
       
       
       Stacks:
       -------
       it composed file for the production swarm. Stacks accept cpmmose file as thier declarative defination fpr services, networks and volumes
       
       Stack is like a conposed file (version 3 or higher) for dockers swarm 
       
       docker stack deploy
       
                         CLI:
                         ----
                          deploy      Deploy a new stack or update an existing stack
                          ls          List stacks
                          ps          List the tasks in the stack
                          rm          Remove one or more stacks
                          services    List the services in the stack

       TIP:
       visualizer - give you clean GUI of the stack and services running in the all the nodes.
       
       Secrets storage:
       ----------------
        Is the Secrets storage that you can save sring or binery up 500kb. 
        Secrets are stored in the swarm, then assigen it to the srivices
        They look like the file in the conatiner but are actally in-memory file system
        /rum/Secrets/<Secrets_name> or
        /rum/Secrets/<Secrets_alias>
       
       
                 CLI:
                 ----
                create      Create a secret from a file or STDIN as content
                inspect     Display detailed information on one or more secrets
                ls          List secrets
                rm          Remove one or more secrets


       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
